package main

// Code generated by PacketKindTreeNodeHelper - DO NOT EDIT.
import (
	_ "embed"
	"strings"
)

type PacketKindTreeNodeKind byte

const (
	InvalidPacketKindTreeNodeKind PacketKindTreeNodeKind = iota
	JsKind
	CssKind
	ExeKind
	FlashKind
	JavaKind
)

func (p PacketKindTreeNodeKind) String() string {
	switch p {
	case JsKind:
		return "Js"
	case CssKind:
		return "Css"
	case ExeKind:
		return "Exe"
	case FlashKind:
		return "Flash"
	case JavaKind:
		return "Java"
	}
	return "invalid PacketKindTreeNodeKind"
}

func (p PacketKindTreeNodeKind) Keys() []string {
	return []string{
		"Js",
		"Css",
		"Exe",
		"Flash",
		"Java",
	}
}

func (p PacketKindTreeNodeKind) FileName() string {
	switch p {
	case JsKind:
		return "Js.png"
	case CssKind:
		return "css.png"
	case ExeKind:
		return "exe.png"
	case FlashKind:
		return "flash.png"
	case JavaKind:
		return "java.png"
	}
	return "invalid PacketKindTreeNodeKind"
}

func (p PacketKindTreeNodeKind) AssertKind(name string) PacketKindTreeNodeKind {
	for _, kind := range p.Kinds() {
		if strings.Contains(strings.ToLower(name), kind.String()) {
			return kind
		}
	}
	return InvalidPacketKindTreeNodeKind
}

func (p PacketKindTreeNodeKind) Kinds() []PacketKindTreeNodeKind {
	return []PacketKindTreeNodeKind{
		JsKind,
		CssKind,
		ExeKind,
		FlashKind,
		JavaKind,
	}
}

func (p PacketKindTreeNodeKind) Buffer() []byte {
	switch p {
	case JsKind:
		return jsBuf
	case CssKind:
		return cssBuf
	case ExeKind:
		return exeBuf
	case FlashKind:
		return flashBuf
	case JavaKind:
		return javaBuf
	}
	return nil
}

var (
	//go:embed asserts/ext/Js.png
	jsBuf []byte

	//go:embed asserts/ext/css.png
	cssBuf []byte

	//go:embed asserts/ext/exe.png
	exeBuf []byte

	//go:embed asserts/ext/flash.png
	flashBuf []byte

	//go:embed asserts/ext/java.png
	javaBuf []byte
)
